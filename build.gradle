import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

plugins {
    id 'groovy'
    id 'io.github.gradle-nexus.publish-plugin'
}

version = projectVersion
ext.set('grailsVersion', libs.versions.grails.asProvider().get())
ext.set('isSnapshot', projectVersion.endsWith('-SNAPSHOT'))
ext.set('isReleaseVersion', !isSnapshot)

if (isReleaseVersion) {
    nexusPublishing {
        String nexusUser = project.findProperty('sonatypeOssUsername')
        String nexusPass = project.findProperty('sonatypeOssPassword')
        String nexusStagingProfileId = project.findProperty('sonatypeOssStagingProfileId')
        repositories {
            sonatype {
                nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
                username = nexusUser
                password = nexusPass
                stagingProfileId = nexusStagingProfileId
            }
        }
    }
}

subprojects {

    version = rootProject.version

    repositories {
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
        if (libs.versions.groovy.get().endsWith('-SNAPSHOT')) {
            maven {
                name = 'Groovy Snapshot Repo'
                url = libs.versions.groovy.get().startsWith('3') ?
                    'https://groovy.jfrog.io/artifactory/libs-snapshot-local' :
                    'https://repository.apache.org/content/repositories/snapshots'
            }
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter tasks.withType(Sign)
}