plugins {
    id "com.gradle.enterprise" version '3.16.2'
    id 'com.gradle.common-custom-user-data-gradle-plugin' version '1.13'
}

gradleEnterprise {
    server = 'https://ge.grails.org'
    buildScan {
        publishAlwaysIf(System.getenv('CI') == 'true')
        publishIfAuthenticated()
        uploadInBackground = System.getenv('CI') == null
        capture {
            taskInputFiles = true
        }
    }
}

buildCache {
    local { enabled = System.getenv('CI') != 'true' }
    remote(gradleEnterprise.buildCache) {
        def isAuthenticated = System.getenv('GRADLE_ENTERPRISE_ACCESS_KEY')
        push = System.getenv('CI') == 'true' && isAuthenticated
        enabled = true
    }
}

rootProject.name = 'grails-async'

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            def groovyVersion = System.getenv('GROOVY_VERSION')
            if (groovyVersion) {
                logger.warn "Using custom version $groovyVersion of Groovy due to GROOVY_VERSION being set."
                version('groovy', groovyVersion)
            }
        }
    }
}

include 'docs'
include 'grails-async-core'
include 'grails-async-gpars'
include 'grails-async-rxjava'
include 'grails-async-rxjava2'
include 'grails-events-core'
include 'grails-events-compat'
include 'grails-events-transform'
include 'grails-events-gpars'
include 'grails-events-spring'
include 'grails-events-rxjava'
include 'grails-events-rxjava2'
include 'grails-plugin-async'
include 'grails-plugin-events'

file('examples').eachDir { dir ->
    include "examples-$dir.name"
    project(":examples-$dir.name").projectDir = dir
}